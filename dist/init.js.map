{"version":3,"sources":["../src/init.js"],"names":["LocalStorage","put","then","get","d","console","log","MyElement","html","LitElement","customElements","define","gen","Math","random","pp","Promise","resolve","run","p","b","z","a"],"mappings":";;;;;;;;;;;;;AAQAA,gCAAaC,GAAb,CAAiB,OAAjB,EAA0B,UAA1B,EAAsCC,IAAtC,CAA2C,YAAM;AAC/CF,kCAAaG,GAAb,CAAiB,OAAjB,EAA0BD,IAA1B,CAA+B,UAAAE,CAAC,EAAE;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA4BF,CAA5B;AAA+B,KAAlE;AACD,GAFD,E,CAIA;;;AAGA;MACMG,S;;;;;;;;;;;;;AAEJ;;;;;;+BAMQ;AACN;;;;;;AAMA,mBAAOC,gBAAP;AAID;;;IAnBqBC,sB,GAqBxB;;;AACAC,EAAAA,cAAc,CAACC,MAAf,CAAsB,YAAtB,EAAoCJ,SAApC;AAGA,MAAMK,GAAG;AAAA;AAAA,0BAAG;AAAA;AAAA;AAAA;AAAA;AAAA,iBACD,IADC;AAAA;AAAA;AAAA;;AAAA;AACK,mBAAMC,IAAI,CAACC,MAAL,EAAN;;AADL;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH,CAAT;;WAIeC,E;;;;;;;4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA,gDACWC,OAAO,CAACC,OAAR,CAAgB,gBAAhB,CADX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;WAIeC,G;;;;;;;4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACIb,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AADJ;AAAA,qBAEoBS,EAAE,EAFtB;;AAAA;AAEUI,cAAAA,CAFV;AAGId,cAAAA,OAAO,CAACC,GAAR,CAAYa,CAAZ;;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;AAMAD,EAAAA,GAAG;AAEH,MAAME,CAAC,GAAGR,GAAG,EAAb;AAEA,MAAMS,CAAC,GAAG,IAAIC,IAAJ,CAAM,gBAAN,CAAV;AAIAjB,EAAAA,OAAO,CAACC,GAAR,8BAAkCe,CAAlC,GAAuCA,CAAvC;AAEAhB,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ","sourcesContent":["\nimport { a } from \"./a\";\n//import {LitElement} from 'lit-element';\n//console.log(LitElement);\n\nimport { LocalStorage } from 'ttl-localstorage';\n\n\nLocalStorage.put('myKey', 'soy pepe').then(() => {\n  LocalStorage.get('myKey').then(d=>{console.log('Quien soy? ->',d)})\n});\n\n// Import the LitElement base class and html helper function\nimport { LitElement, html } from 'lit-element';\n\n// Extend the LitElement base class\nclass MyElement extends LitElement {\n\n  /**\n   * Implement `render` to define a template for your element.\n   *\n   * You must provide an implementation of `render` for any element\n   * that uses LitElement as a base class.\n   */\n  render(){\n    /**\n     * `render` must return a lit-html `TemplateResult`.\n     *\n     * To create a `TemplateResult`, tag a JavaScript template literal\n     * with the `html` helper function:\n     */\n    return html`\n      <!-- template content -->\n      <p>A paragraph</p>\n    `;\n  }\n}\n// Register the new element with the browser.\ncustomElements.define('my-element', MyElement);\n\n\nconst gen = function* () {\n    while (true) yield Math.random();\n}\n\nasync function pp() {\n    return Promise.resolve('ja je ji jo ju');\n}\n\nasync function run() {\n    console.log('entro en run')\n    const p = await pp();\n    console.log(p)\n}\n\nrun();\n\nconst b = gen();\n\nconst z = new a('SuperlopeZzzzz');\n\n\n\nconsole.log(`Soy super Zzzzz -> ${z}`, z);\n\nconsole.log(':: Fin de init.js ::');"],"file":"init.js"}