{"version":3,"sources":["../node_modules/lit-html/lib/directive.js","../node_modules/lit-html/lib/dom.js","../node_modules/lit-html/lib/part.js","../node_modules/lit-html/lib/template.js","../node_modules/lit-html/lib/template-instance.js","../node_modules/lit-html/lib/template-result.js","../node_modules/lit-html/lib/parts.js","../node_modules/lit-html/lib/default-template-processor.js","../node_modules/lit-html/lib/template-factory.js","../node_modules/lit-html/lib/render.js","../node_modules/lit-html/lit-html.js","../node_modules/lit-html/lib/modify-template.js","../node_modules/lit-html/lib/shady-render.js","../node_modules/lit-element/lib/updating-element.js","../node_modules/lit-element/lib/decorators.js","../node_modules/lit-element/lib/css-tag.js","../node_modules/lit-element/lit-element.js"],"names":["render","litRender"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment poisition.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceeding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceeding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (scopeName, renderedDOM, template) => {\n    shadyRenderSet.add(scopeName);\n    // If `renderedDOM` is stamped from a Template, then we need to edit that\n    // Template's underlying template element. Otherwise, we create one here\n    // to give to ShadyCSS, which still requires one while scoping.\n    const templateElement = !!template ? template.element : document.createElement('template');\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    const content = templateElement.content;\n    if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    }\n    else {\n        content.insertBefore(condensedStyle, content.firstChild);\n    }\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n    const style = content.querySelector('style');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n    }\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(scopeName, renderContainer, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar _a;\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = Promise.resolve(true);\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        this._hasConnectedResolver = undefined;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (!superCtor.hasOwnProperty(finalized)) {\n            superCtor.finalize();\n        }\n        this[finalized] = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        this._updateState = this._updateState | STATE_HAS_CONNECTED;\n        // Ensure first connection completes an update. Updates cannot complete\n        // before connection and if one is pending connection the\n        // `_hasConnectionResolver` will exist. If so, resolve it to complete the\n        // update, otherwise requestUpdate.\n        if (this._hasConnectedResolver) {\n            this._hasConnectedResolver();\n            this._hasConnectedResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        // Mark state updating...\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        let resolve;\n        let reject;\n        const previousUpdatePromise = this._updatePromise;\n        this._updatePromise = new Promise((res, rej) => {\n            resolve = res;\n            reject = rej;\n        });\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await previousUpdatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        // Make sure the element has connected before updating.\n        if (!this._hasConnected) {\n            await new Promise((res) => this._hasConnectedResolver = res);\n        }\n        try {\n            const result = this.performUpdate();\n            // If `performUpdate` returns a Promise, we await it. This is done to\n            // enable coordinating updates with a scheduler. Note, the result is\n            // checked to avoid delaying an additional microtask unless we need to.\n            if (result != null) {\n                await result;\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n        resolve(!this._hasRequestedUpdate);\n    }\n    get _hasConnected() {\n        return (this._updateState & STATE_HAS_CONNECTED);\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            throw e;\n        }\n        finally {\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update.\n     *\n     * To await additional asynchronous work, override the `_getUpdateComplete`\n     * method. For example, it is sometimes useful to await a rendered element\n     * before fulfilling this Promise. To do this, first await\n     * `super._getUpdateComplete()`, then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._getUpdateComplete();\n    }\n    /**\n     * Override point for the `updateComplete` promise.\n     *\n     * It is not safe to override the `updateComplete` getter directly due to a\n     * limitation in TypeScript which means it is not possible to call a\n     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n     * This method should be overridden instead. For example:\n     *\n     *   class MyElement extends LitElement {\n     *     async _getUpdateComplete() {\n     *       await super._getUpdateComplete();\n     *       await this._myChild.updateComplete;\n     *     }\n     *   }\n     */\n    _getUpdateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n_a = finalized;\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement[_a] = true;\n//# sourceMappingURL=updating-element.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst legacyCustomElement = (tagName, clazz) => {\n    window.customElements.define(tagName, clazz);\n    // Cast as any because TS doesn't recognize the return type as being a\n    // subtype of the decorated class when clazz is typed as\n    // `Constructor<HTMLElement>` for some reason.\n    // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n    // applied to elements however.\n    // tslint:disable-next-line:no-any\n    return clazz;\n};\nconst standardCustomElement = (tagName, descriptor) => {\n    const { kind, elements } = descriptor;\n    return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz) {\n            window.customElements.define(tagName, clazz);\n        }\n    };\n};\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * @param tagName the name of the custom element to define\n */\nexport const customElement = (tagName) => (classOrDescriptor) => (typeof classOrDescriptor === 'function') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\nconst standardProperty = (options, element) => {\n    // When decorating an accessor, pass it through and add property metadata.\n    // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n    // stomp over the user's accessor.\n    if (element.kind === 'method' && element.descriptor &&\n        !('value' in element.descriptor)) {\n        return Object.assign({}, element, { finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            } });\n    }\n    else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n            kind: 'field',\n            key: Symbol(),\n            placement: 'own',\n            descriptor: {},\n            // When @babel/plugin-proposal-decorators implements initializers,\n            // do this instead of the initializer below. See:\n            // https://github.com/babel/babel/issues/9260 extras: [\n            //   {\n            //     kind: 'initializer',\n            //     placement: 'own',\n            //     initializer: descriptor.initializer,\n            //   }\n            // ],\n            initializer() {\n                if (typeof element.initializer === 'function') {\n                    this[element.key] = element.initializer.call(this);\n                }\n            },\n            finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            }\n        };\n    }\n};\nconst legacyProperty = (options, proto, name) => {\n    proto.constructor\n        .createProperty(name, options);\n};\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n *\n * @ExportDecoratedItems\n */\nexport function property(options) {\n    // tslint:disable-next-line:no-any decorator\n    return (protoOrDescriptor, name) => (name !== undefined) ?\n        legacyProperty(options, protoOrDescriptor, name) :\n        standardProperty(options, protoOrDescriptor);\n}\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function query(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelector(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function queryAll(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelectorAll(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\nconst legacyQuery = (descriptor, proto, name) => {\n    Object.defineProperty(proto, name, descriptor);\n};\nconst standardQuery = (descriptor, element) => ({\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor,\n});\nconst standardEventOptions = (options, element) => {\n    return Object.assign({}, element, { finisher(clazz) {\n            Object.assign(clazz.prototype[element.key], options);\n        } });\n};\nconst legacyEventOptions = \n// tslint:disable-next-line:no-any legacy decorator\n(options, proto, name) => {\n    Object.assign(proto[name], options);\n};\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifis event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *\n *       clicked = false;\n *\n *       render() {\n *         return html`<div @click=${this._onClick}`><button></button></div>`;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nexport const eventOptions = (options) => \n// Return value typed as any to prevent TypeScript from complaining that\n// standard decorator function signature does not match TypeScript decorator\n// signature\n// TODO(kschaaf): unclear why it was only failing on this decorator and not\n// the others\n((protoOrDescriptor, name) => (name !== undefined) ?\n    legacyEventOptions(options, protoOrDescriptor, name) :\n    standardEventOptions(options, protoOrDescriptor));\n//# sourceMappingURL=decorators.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.2.1');\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(styles, result = []) {\n    for (let i = 0, length = styles.length; i < length; i++) {\n        const value = styles[i];\n        if (Array.isArray(value)) {\n            arrayFlat(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\nexport class LitElement extends UpdatingElement {\n    /** @nocollapse */\n    static finalize() {\n        // The Closure JS Compiler does not always preserve the correct \"this\"\n        // when calling static super methods (b/137460243), so explicitly bind.\n        super.finalize.call(this);\n        // Prepare styling that is stamped at first render time. Styling\n        // is built from user provided `styles` or is inherited from the superclass.\n        this._styles =\n            this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n                this._getUniqueStyles() :\n                this._styles || [];\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Take care not to call `this.styles` multiple times since this generates\n        // new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.styles;\n        const styles = [];\n        if (Array.isArray(userStyles)) {\n            const flatStyles = flattenStyles(userStyles);\n            // As a performance optimization to avoid duplicated styling that can\n            // occur especially when composing via subclassing, de-duplicate styles\n            // preserving the last item in the list. The last item is kept to\n            // try to preserve cascade order with the assumption that it's most\n            // important that last added styles override previous styles.\n            const styleSet = flatStyles.reduceRight((set, s) => {\n                set.add(s);\n                // on IE set.add does not return the set.\n                return set;\n            }, new Set());\n            // Array.from does not work on Set in IE\n            styleSet.forEach((v) => styles.unshift(v));\n        }\n        else if (userStyles) {\n            styles.push(userStyles);\n        }\n        return styles;\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See updating-element.ts for more information.\n */\nLitElement['finalized'] = true;\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map"],"file":"lit-element.js"}